generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model book {
  id                   BigInt       @id @default(autoincrement())
  isbn                 String?      @db.Char(10)
  isbn13               String?      @db.Char(13)
  title                String?
  titleWithoutSeries   String?      @map("title_without_series")
  modified_title       String?
  publisher            String?
  modified_publisher   String?
  yearPublished        Float?       @db.Real @map("year_published")
  url                  String?
  coverPage            String?      @map("cover_page")
  pages                Int?
  numberOfRatings      Float?       @db.Real @map("number_of_ratings")
  isEbook              Boolean?     @default(false) @map("is_ebook")
  averageRating        Float?       @db.Real @map("average_rating")
  bookIndexes          bookIndex[]
  reviews              review[]
  bookmarks            bookmark[]
}

model bookIndex {
  id      Int    @id @default(autoincrement())
  book_id BigInt
  index   Int?
  book    book   @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("book_index")
}

model bookmark {
  id         Int       @id @default(autoincrement())
  userId     String    @db.Uuid @map("user_id")
  bookId     BigInt    @map("book_id")
  addedAt    DateTime  @default(now()) @db.Timestamptz(6) @map("added_at")
  deletedAt  DateTime? @db.Timestamptz(6) @map("deleted_at")
  book       book      @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model review {
  id         BigInt    @id @default(autoincrement())
  rating     Int?      @db.SmallInt
  has_read   Boolean?  @default(false)
  user_id    String    @db.Uuid
  book_id    BigInt
  added_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  book       book      @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id            String       @id @db.Uuid @default(uuid())
  name          String?      @db.VarChar(200)
  email         String?      @unique @db.VarChar(500)
  image         String?      
  emailVerified DateTime?    @map("email_verified")
  login_method  Int          @default(1) @db.SmallInt
  addedAt       DateTime     @default(now()) @db.Timestamptz(6) @map("added_at")
  updatedAt     DateTime     @default(now()) @db.Timestamptz(6) @map("updated_at")
  deletedAt     DateTime?    @db.Timestamptz(6) @map("deleted_at")
  review        review[]
  userIndexes   userIndex[]
  bookmarks     bookmark[]
  accounts      account[]
  sessions      session[]
}

model account {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @db.Timestamptz(6)
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_token")
}

model userIndex {
  id      Int    @id @default(autoincrement())
  user_id String @db.Uuid
  index   Int    @default(autoincrement()) @db.SmallInt
  user    user   @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("user_index")
}
